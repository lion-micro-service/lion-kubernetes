apiVersion: v1
kind: Service
metadata:
  namespace: lion
  name: minio-headless
  labels:
    app: minio-headless
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - port: 9000
      name: server
      targetPort: 9000
  selector:
    app: minio
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  # This name uniquely identifies the StatefulSet
  namespace: lion
  name: minio
spec:
  serviceName: minio-headless
  podManagementPolicy: Parallel
  replicas: 4
  selector:
    matchLabels:
      app: minio # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: minio # has to match .spec.selector.matchLabels
    spec:
      containers:
        - name: minio
          imagePullPolicy: IfNotPresent
          env:
            - name: MINIO_ACCESS_KEY
              value: "minio"
            - name: MINIO_SECRET_KEY
              value: "minio123"
          image: minio/minio:RELEASE.2020-11-10T21-02-24Z
          args:
            - server
            - http://minio-{0...3}.minio-headless.lion.svc.cluster.local/data
          ports:
            - containerPort: 9000
          # These volume mounts are persistent. Each pod in the PetSet
          # gets a volume mounted based on this field.
          volumeMounts:
            - name: data
              mountPath: /data
          # Liveness probe detects situations where MinIO server instance
          # is not working properly and needs restart. Kubernetes automatically
          # restarts the pods if liveness checks fail.
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
          # Readiness probe detects situations where MinIO server instance
          # is not ready to accept connections. Kubernetes automatically
          # stops all the traffic to the pods if readiness checks fail.
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: managed-nfs-storage
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  namespace: lion
  name: minio-ingress
spec:
  ingressClassName: nginx
  rules:
    - host: www.lion-minio.com
      http:
        paths:
          - path: /
            backend:
              serviceName: minio-headless
              servicePort: 9000